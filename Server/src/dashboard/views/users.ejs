<%- include('layout', { title: 'User Management' }) %>

<div class="bg-white shadow rounded-lg">
    <div class="px-4 py-5 sm:p-6">
        <!-- Filters and Search -->
        <div class="mb-4 grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700">Status</label>
                <select id="statusFilter" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                    <option value="">All</option>
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                    <option value="banned">Banned</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700">Role</label>
                <select id="roleFilter" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                    <option value="">All</option>
                    <option value="admin">Admin</option>
                    <option value="moderator">Moderator</option>
                    <option value="user">User</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700">Sort By</label>
                <select id="sortFilter" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                    <option value="created_at">Join Date</option>
                    <option value="last_active">Last Active</option>
                    <option value="matches">Matches Played</option>
                    <option value="rating">Rating</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700">Search</label>
                <input type="text" id="searchInput" placeholder="Search users..." 
                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
            </div>
        </div>

        <!-- Add User Button -->
        <div class="mb-4">
            <button onclick="showAddModal()" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                Add User
            </button>
        </div>

        <!-- Users Table -->
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead>
                    <tr>
                        <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Username</th>
                        <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Email</th>
                        <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Role</th>
                        <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                        <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Matches</th>
                        <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Rating</th>
                        <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Last Active</th>
                        <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                    </tr>
                </thead>
                <tbody id="usersTableBody" class="bg-white divide-y divide-gray-200">
                    <!-- User data will be inserted here -->
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="mt-4 flex items-center justify-between">
            <div class="flex-1 flex justify-between sm:hidden">
                <button onclick="previousPage()" class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                    Previous
                </button>
                <button onclick="nextPage()" class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                    Next
                </button>
            </div>
            <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                <div>
                    <p class="text-sm text-gray-700">
                        Showing <span class="font-medium" id="startRange"></span> to <span class="font-medium" id="endRange"></span> of 
                        <span class="font-medium" id="totalUsers"></span> users
                    </p>
                </div>
                <div>
                    <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination" id="pagination">
                        <!-- Pagination buttons will be inserted here -->
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- User Modal -->
<div id="userModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <h3 class="text-lg font-medium text-gray-900 mb-4" id="modalTitle">Add User</h3>
            <form id="userForm">
                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2">Username</label>
                    <input type="text" name="username" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700">
                </div>

                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2">Email</label>
                    <input type="email" name="email" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700">
                </div>

                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2">Password</label>
                    <input type="password" name="password" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700">
                    <p class="text-sm text-gray-500 mt-1">Leave empty to keep current password when editing</p>
                </div>

                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2">Role</label>
                    <select name="role" required class="shadow border rounded w-full py-2 px-3 text-gray-700">
                        <option value="user">User</option>
                        <option value="moderator">Moderator</option>
                        <option value="admin">Admin</option>
                    </select>
                </div>

                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2">Status</label>
                    <select name="status" required class="shadow border rounded w-full py-2 px-3 text-gray-700">
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                        <option value="banned">Banned</option>
                    </select>
                </div>

                <div class="flex justify-end">
                    <button type="button" onclick="closeModal()" class="mr-2 px-4 py-2 text-gray-500 hover:text-gray-700">
                        Cancel
                    </button>
                    <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                        Save
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- User Details Modal -->
<div id="userDetailsModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
    <div class="relative top-20 mx-auto p-5 border w-3/4 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-medium text-gray-900">User Details</h3>
                <button onclick="closeDetailsModal()" class="text-gray-500 hover:text-gray-700">Ã—</button>
            </div>
            <div id="userDetails" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- Basic Info -->
                <div class="bg-gray-50 p-4 rounded">
                    <h4 class="font-medium text-gray-900 mb-2">Basic Information</h4>
                    <div id="basicInfo"></div>
                </div>

                <!-- Statistics -->
                <div class="bg-gray-50 p-4 rounded">
                    <h4 class="font-medium text-gray-900 mb-2">Statistics</h4>
                    <div id="userStats"></div>
                </div>

                <!-- Match History -->
                <div class="col-span-2">
                    <h4 class="font-medium text-gray-900 mb-2">Recent Matches</h4>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead>
                                <tr>
                                    <th class="px-4 py-2 bg-gray-50">Date</th>
                                    <th class="px-4 py-2 bg-gray-50">Game Mode</th>
                                    <th class="px-4 py-2 bg-gray-50">Result</th>
                                    <th class="px-4 py-2 bg-gray-50">Rating Change</th>
                                    <th class="px-4 py-2 bg-gray-50">Duration</th>
                                </tr>
                            </thead>
                            <tbody id="userMatches"></tbody>
                        </table>
                    </div>
                </div>

                <!-- Performance Charts -->
                <div class="col-span-2">
                    <h4 class="font-medium text-gray-900 mb-2">Performance</h4>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <canvas id="ratingChart"></canvas>
                        </div>
                        <div>
                            <canvas id="winRateChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
let currentPage = 1;
const pageSize = 10;
let currentUserId = null;
let ratingChart = null;
let winRateChart = null;

// Initialize filters
document.querySelectorAll('select, input').forEach(element => {
    element.addEventListener('change', () => loadUsers(1));
});

// Debounce search input
let searchTimeout;
document.getElementById('searchInput').addEventListener('input', (e) => {
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(() => loadUsers(1), 300);
});

function loadUsers(page) {
    currentPage = page;
    const filters = {
        status: document.getElementById('statusFilter').value,
        role: document.getElementById('roleFilter').value,
        sort: document.getElementById('sortFilter').value,
        search: document.getElementById('searchInput').value,
        page,
        pageSize
    };

    const queryString = new URLSearchParams(filters).toString();
    fetch(`/api/users?${queryString}`)
        .then(res => res.json())
        .then(data => {
            updateTable(data.users);
            updatePagination(data.total);
        });
}

function updateTable(users) {
    const tbody = document.getElementById('usersTableBody');
    tbody.innerHTML = users.map(user => `
        <tr>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                <a href="#" onclick="viewUserDetails('${user.id}')" class="text-indigo-600 hover:text-indigo-900">
                    ${user.username}
                </a>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${user.email}</td>
            <td class="px-6 py-4 whitespace-nowrap">
                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full
                    ${user.role === 'admin' ? 'bg-purple-100 text-purple-800' :
                    user.role === 'moderator' ? 'bg-blue-100 text-blue-800' :
                    'bg-gray-100 text-gray-800'}">
                    ${user.role}
                </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full
                    ${user.status === 'active' ? 'bg-green-100 text-green-800' :
                    user.status === 'inactive' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-red-100 text-red-800'}">
                    ${user.status}
                </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${user.matches_played}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${user.rating}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                ${new Date(user.last_active).toLocaleString()}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <button onclick="editUser('${user.id}')" class="text-indigo-600 hover:text-indigo-900 mr-2">Edit</button>
                <button onclick="deleteUser('${user.id}')" class="text-red-600 hover:text-red-900">Delete</button>
            </td>
        </tr>
    `).join('');
}

function updatePagination(total) {
    // ... (same as before)
}

function showAddModal() {
    currentUserId = null;
    document.getElementById('modalTitle').textContent = 'Add User';
    document.getElementById('userForm').reset();
    document.getElementById('userModal').classList.remove('hidden');
}

function editUser(id) {
    currentUserId = id;
    document.getElementById('modalTitle').textContent = 'Edit User';
    
    fetch(`/api/users/${id}`)
        .then(res => res.json())
        .then(user => {
            const form = document.getElementById('userForm');
            form.username.value = user.username;
            form.email.value = user.email;
            form.role.value = user.role;
            form.status.value = user.status;
            document.getElementById('userModal').classList.remove('hidden');
        });
}

function closeModal() {
    document.getElementById('userModal').classList.add('hidden');
}

function closeDetailsModal() {
    document.getElementById('userDetailsModal').classList.add('hidden');
    if (ratingChart) {
        ratingChart.destroy();
    }
    if (winRateChart) {
        winRateChart.destroy();
    }
}

function deleteUser(id) {
    if (confirm('Are you sure you want to delete this user?')) {
        fetch(`/api/users/${id}`, { method: 'DELETE' })
            .then(() => loadUsers(currentPage));
    }
}

document.getElementById('userForm').onsubmit = function(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData.entries());
    
    // Remove password if empty on edit
    if (currentUserId && !data.password) {
        delete data.password;
    }

    const method = currentUserId ? 'PUT' : 'POST';
    const url = currentUserId ? `/api/users/${currentUserId}` : '/api/users';

    fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
    }).then(() => {
        closeModal();
        loadUsers(currentPage);
    });
};

function viewUserDetails(id) {
    fetch(`/api/users/${id}/details`)
        .then(res => res.json())
        .then(data => {
            // Update basic info
            document.getElementById('basicInfo').innerHTML = `
                <p><strong>Username:</strong> ${data.user.username}</p>
                <p><strong>Email:</strong> ${data.user.email}</p>
                <p><strong>Role:</strong> ${data.user.role}</p>
                <p><strong>Status:</strong> ${data.user.status}</p>
                <p><strong>Joined:</strong> ${new Date(data.user.created_at).toLocaleDateString()}</p>
                <p><strong>Last Active:</strong> ${new Date(data.user.last_active).toLocaleString()}</p>
            `;

            // Update stats
            document.getElementById('userStats').innerHTML = `
                <p><strong>Rating:</strong> ${data.stats.rating}</p>
                <p><strong>Total Matches:</strong> ${data.stats.total_matches}</p>
                <p><strong>Wins:</strong> ${data.stats.wins}</p>
                <p><strong>Losses:</strong> ${data.stats.losses}</p>
                <p><strong>Win Rate:</strong> ${((data.stats.wins / data.stats.total_matches) * 100).toFixed(1)}%</p>
                <p><strong>Average Match Duration:</strong> ${data.stats.avg_duration} minutes</p>
            `;

            // Update match history
            document.getElementById('userMatches').innerHTML = data.matches.map(match => `
                <tr>
                    <td class="px-4 py-2">${new Date(match.created_at).toLocaleString()}</td>
                    <td class="px-4 py-2">${match.game_mode}</td>
                    <td class="px-4 py-2">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full
                            ${match.is_winner ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                            ${match.is_winner ? 'Won' : 'Lost'}
                        </span>
                    </td>
                    <td class="px-4 py-2">
                        <span class="${match.rating_change >= 0 ? 'text-green-600' : 'text-red-600'}">
                            ${match.rating_change >= 0 ? '+' : ''}${match.rating_change}
                        </span>
                    </td>
                    <td class="px-4 py-2">${match.duration} min</td>
                </tr>
            `).join('');

            // Update charts
            updateRatingChart(data.rating_history);
            updateWinRateChart(data.win_rate_history);

            document.getElementById('userDetailsModal').classList.remove('hidden');
        });
}

function updateRatingChart(history) {
    const ctx = document.getElementById('ratingChart').getContext('2d');
    if (ratingChart) {
        ratingChart.destroy();
    }
    ratingChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: history.map(h => new Date(h.date).toLocaleDateString()),
            datasets: [{
                label: 'Rating',
                data: history.map(h => h.rating),
                borderColor: 'rgb(59, 130, 246)',
                tension: 0.1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: 'Rating History'
                }
            }
        }
    });
}

function updateWinRateChart(history) {
    const ctx = document.getElementById('winRateChart').getContext('2d');
    if (winRateChart) {
        winRateChart.destroy();
    }
    winRateChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: history.map(h => h.period),
            datasets: [{
                label: 'Win Rate %',
                data: history.map(h => h.win_rate * 100),
                borderColor: 'rgb(34, 197, 94)',
                tension: 0.1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: 'Win Rate History'
                }
            },
            scales: {
                y: {
                    min: 0,
                    max: 100
                }
            }
        }
    });
}

// Initial load
loadUsers(1);
</script>
